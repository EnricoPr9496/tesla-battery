name: Tesla Logger & Report

on:
  schedule:
    - cron: "*/25 * * * *"   # trigger ogni 25', il gate sotto fa rispettare i ~50' reali
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    env:
      TZ: Europe/Rome
      CACHE_PREFIX: tesla-state-v4   # bump del prefisso (ripartenza pulita)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Compute date key (Europe/Rome)
        run: echo "DATE=$(TZ=Europe/Rome date +%F)" >> "$GITHUB_ENV"

      # ---------- Cache: restore (prova prefisso attuale e anche vecchi prefissi, se esistono) ----------
      - name: Restore state cache (tokens, contatori, log)
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: .runner_state
          key: ${{ env.CACHE_PREFIX }}-${{ env.DATE }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-
            tesla-state-v3-
            tesla-state-v2-
            tesla-state-v1-
            tesla-state-

      - name: Ensure state dir
        run: mkdir -p .runner_state

      # ---------- Bootstrap: se la cache è vuota, prova a caricare il log pubblicato su Pages ----------
      - name: Bootstrap log from Pages if missing
        shell: bash
        run: |
          if [ ! -f .runner_state/tesla_soc.jsonl ]; then
            echo "Provo a recuperare il log dalla pagina pubblica…"
            curl -fSLo .runner_state/tesla_soc.jsonl \
              https://enricopr9496.github.io/tesla-battery/tesla_soc.jsonl || echo "Nessun log pubblico trovato."
          else
            echo "Log già presente in cache."
          fi

      # ---------- Prune log: conserva solo ultimi 30 giorni ----------
      - name: Prune log to last 30 days
        shell: bash
        run: |
          node tools/prune_log.mjs .runner_state/tesla_soc.jsonl 30 || true

      # ---------- Gate: esegui solo se sono passati >= 50 min ----------
      - name: Enforce 50-minute spacing
        id: gate
        shell: bash
        run: |
          file=.runner_state/last_run.txt
          now=$(date +%s)
          if [ -f "$file" ]; then
            last=$(cat "$file" || echo 0)
          else
            last=0
          fi
          diff=$(( now - last ))
          # 3000s = 50 minuti
          if [ "$diff" -lt 3000 ]; then
            echo "Troppo presto: ultimo run ${diff}s fa (<3000s). Skip."
            echo "run=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "run=true" >> "$GITHUB_OUTPUT"
          echo "$now" > "$file"

      - name: Create .env from secrets + config
        if: ${{ steps.gate.outputs.run == 'true' }}
        run: |
          cat > .env <<'EOF'
          TESLA_CLIENT_ID=${{ secrets.TESLA_CLIENT_ID }}
          TESLA_CLIENT_SECRET=${{ secrets.TESLA_CLIENT_SECRET }}
          TESLA_REGION=eu
          TESLA_REDIRECT_URI=${{ secrets.TESLA_REDIRECT_URI }}
          TESLA_VEHICLE_TAG=${{ secrets.TESLA_VEHICLE_TAG }}

          EXTRA_SCOPES=vehicle_cmds
          WAKE_POLICY=onfail
          QUIET_WINDOW=00:00-07:30
          MAX_WAKE_PER_DAY=16

          LOG_FILE=.runner_state/tesla_soc.jsonl
          DAILY_WAKE_FILE=.runner_state/wake_counter.json
          TOKENS_PATH=.runner_state/tokens.json
          STATE_PATH=.runner_state/state.json

          AUTO_PARTNER_REGISTER=true
          TESLA_PARTNER_DOMAIN=${{ secrets.TESLA_PARTNER_DOMAIN }}
          TESLA_PARTNER_CLIENT_ID=${{ secrets.TESLA_PARTNER_CLIENT_ID }}
          TESLA_PARTNER_CLIENT_SECRET=${{ secrets.TESLA_PARTNER_CLIENT_SECRET }}

          # report window (giorni)
          DAYS_REPORT=14

          # non fallire in quiet window se l'auto è asleep/offline
          EXIT_ZERO_ON_QUIET=true
          EOF

      # ---------- Seed: usa TESLA_REFRESH_TOKEN, altrimenti TESLA_AUTH_CODE (una tantum) ----------
      - name: Seed tokens (refresh token o auth code una tantum)
        if: ${{ steps.gate.outputs.run == 'true' }}
        shell: bash
        run: |
          set -e
          mkdir -p .runner_state
          if [ -f .runner_state/tokens.json ]; then
            echo "tokens.json ripristinato dalla cache."
            exit 0
          fi

          if [ -n "${{ secrets.TESLA_REFRESH_TOKEN }}" ]; then
            echo "Uso TESLA_REFRESH_TOKEN dal secret."
            echo '{ "refresh_token": "'"${{ secrets.TESLA_REFRESH_TOKEN }}"'", "created_at": '"$(date +%s)"' }' > .runner_state/tokens.json
            exit 0
          fi

          if [ -n "${{ secrets.TESLA_AUTH_CODE }}" ]; then
            echo "Scambio TESLA_AUTH_CODE -> refresh_token ..."
            refresh=$(
              curl -sS -X POST "https://fleet-auth.prd.vn.cloud.tesla.com/oauth2/v3/token" \
                -H "Content-Type: application/x-www-form-urlencoded" \
                --data "grant_type=authorization_code&code=${{ secrets.TESLA_AUTH_CODE }}&client_id=${{ secrets.TESLA_CLIENT_ID }}&redirect_uri=${{ secrets.TESLA_REDIRECT_URI }}" \
              | node -e 'let s="";process.stdin.on("data",d=>s+=d).on("end",()=>{try{let j=JSON.parse(s);if(!j.refresh_token){console.error("No refresh_token");process.exit(2)};process.stdout.write(j.refresh_token)}catch(e){console.error(e);process.exit(2)}})'
            )
            if [ -z "$refresh" ]; then
              echo "Scambio code fallito (forse scaduto o già usato)."
              exit 1
            fi
            echo '{ "refresh_token": "'"$refresh"'" , "created_at": '"$(date +%s)"' }' > .runner_state/tokens.json
            echo "Ok: tokens.json scritto con refresh_token derivato dal code."
            exit 0
          fi

          echo "Né TESLA_REFRESH_TOKEN né TESLA_AUTH_CODE forniti. Imposta almeno uno dei due."
          exit 1

      - name: Run logger
        if: ${{ steps.gate.outputs.run == 'true' }}
        continue-on-error: true        # non fallire il job su errori temporanei / quiet window
        run: npm run log

      - name: Count samples in log
        if: ${{ steps.gate.outputs.run == 'true' }}
        id: count
        shell: bash
        run: |
          if [ -f .runner_state/tesla_soc.jsonl ]; then
            count=$(grep -c '"soc_percent":' .runner_state/tesla_soc.jsonl || true)
          else
            count=0
          fi
          echo "Found samples: $count"
          echo "count=$count" >> "$GITHUB_OUTPUT"

      - name: Build placeholder report (first run)
        if: ${{ steps.gate.outputs.run == 'true' && fromJson(steps.count.outputs.count) < 2 }}
        shell: bash
        run: |
          echo "Meno di 2 letture: costruisco un report segnaposto."
          mkdir -p dist
          cat > dist/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width,initial-scale=1">
          <title>Tesla — Report in preparazione</title>
          <style>
            body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:32px;color:#111}
            .card{border:1px solid #e6e6e6;border-radius:12px;padding:18px;max-width:720px}
            h1{margin:0 0 8px}
            .muted{color:#666}
            code{background:#f6f6f6;padding:2px 6px;border-radius:6px}
          </style>
          <div class="card">
            <h1>Report in preparazione</h1>
            <p class="muted">Servono almeno <b>2</b> letture per disegnare i grafici.</p>
            <p>Il logger è attivo. Al prossimo run troverai il report completo qui.</p>
          </div>
          HTML
          cp .runner_state/tesla_soc.jsonl dist/ || true
          echo "day;delta_soc_pts;soc_first;soc_last;soc_min;soc_max" > dist/daily_summary.csv

      - name: Run analyzer (build site)
        if: ${{ steps.gate.outputs.run == 'true' && fromJson(steps.count.outputs.count) >= 2 }}
        shell: bash
        run: |
          npm run report
          mkdir -p dist
          mv index.html dist/
          cp .runner_state/tesla_soc.jsonl dist/
          cp daily_summary.csv dist/

      - name: Upload report artifact
        if: ${{ steps.gate.outputs.run == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: tesla-report
          path: dist
          retention-days: 14

      - name: Upload Pages artifact
        if: ${{ steps.gate.outputs.run == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to GitHub Pages
        if: ${{ steps.gate.outputs.run == 'true' && github.event_name != 'pull_request' }}
        id: deployment
        uses: actions/deploy-pages@v4

      # ---------- Cache: salva SEMPRE lo stato aggiornato con chiave unica ----------
      - name: Save state cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: .runner_state
          key: ${{ env.CACHE_PREFIX }}-${{ env.DATE }}-${{ github.run_id }}
